#!/usr/bin/env python3

from os.path import join
import os
import pandas as pd
from functools import partial
import math
import glob
from pathlib import Path

name = config["name"]
_data = partial(os.path.join, "data")
_results = partial(os.path.join, "results", name)
_resources = partial(os.path.join, "resources")
_logs = partial(_results, "logs")

### Samples to process (fiveprime.yaml)
samples = config["samples"]
wildcard_constraints:
   sample="|".join(samples)

# Added by Caleb (02-02-2023)
INPUT_PATH_FORMAT = "/gpfs/gsfs9/users/Collinslab/singlecell/SC_decontamination/data/{{sample}}/outs/raw_feature_bc_matrix/{data_file}"

INPUT_DIR_BASE = "/gpfs/gsfs9/users/Collinslab/singlecell/SC_decontamination/data/{sample}/outs/"
INPUT_RAW      = Path(INPUT_DIR_BASE) / "raw_feature_bc_matrix"
INPUT_FILTERED = Path(INPUT_DIR_BASE) / "filtered_feature_bc_matrix"


INPUT_MTX      = Path(INPUT_PATH_FORMAT.format(data_file = 'matrix.mtx.gz'))
INPUT_BARCODES = Path(INPUT_PATH_FORMAT.format(data_file = 'barcodes.tsv.gz'))
INPUT_FEATURES = Path(INPUT_PATH_FORMAT.format(data_file = 'features.tsv.gz'))


rule all:
    input:
        #~~~~~~~~ seurat_round3
        _results("plots/.done"),
        _results("beta_GCG.png"),
        _results("delta_INS.png")


rule prep_droplets:
    input:
        raw_data = directory(INPUT_RAW),
        filtered_data = directory(INPUT_FILTERED)
    output:
        counts_nuclei = _results("counts_protein_coding/{sample}/counts_nuclei.rds"),
        counts_empty = _results("counts_protein_coding/{sample}/counts_empty.rds"),
        filter_file = _results("filter_counts/{sample}/cells_filtered.csv")
    params:
        outdir = lambda wildcards: _results(f"counts_protein_coding/{wildcards.sample}/"),
        outdir2 = lambda wildcards: _results(f"filter_counts/{wildcards.sample}"),
    shell:
        "mkdir -p {params.outdir}; "
        "mkdir -p {params.outdir2}; "
        "echo step,start,end > {params.outdir2}/cells_filtered.csv; "
        """
        {config[Rscript_binary]} workflow/scripts/get_10x_empty_droplets.R \
            --raw_10x_dir {input.raw_data} \
            --filtered_10x_dir {input.filtered_data} \
            --filter_log {output.filter_file} \
            --counts_nuclei {output.counts_nuclei} \
            --counts_empty {output.counts_empty}
        """

rule seurat_prelim:
    input:
        counts = _results("counts_protein_coding/{sample}/counts_nuclei.rds"),
        original_features = INPUT_FEATURES,
        original_barcodes = INPUT_BARCODES
    output:
        #_results("seurat_prelim/{sample}/seurat_obj.rds"),
        _results("seurat_prelim/{sample}/seurat_clusters.csv"),
    params:
        outdir = lambda wildcards:  _results(f"seurat_prelim/{wildcards.sample}"),
        resolution = 0.8
    shell:
        "mkdir -p {params.outdir}; "
        """
        {config[Rscript_binary]} workflow/scripts/run_seurat.R.bak \
            --counts {input.counts} \
            --resolution {params.resolution} \
            --outdir {params.outdir} \
        """


rule decontx_prelim:
    input:
        counts_nuclei = _results("counts_protein_coding/{sample}/counts_nuclei.rds"),
        counts_empty = _results("counts_protein_coding/{sample}/counts_empty.rds"),
        clusters = _results("seurat_prelim/{sample}/seurat_clusters.csv"),
    output:
        _results("decontx_prelim/{sample}/counts_low_contamination_raw.rds"),
    params:
        sample = lambda wildcards: wildcards.sample,
        outdir = lambda wildcards: _results(f"decontx_prelim/{wildcards.sample}"),
        max_contamination = 0.1,
        delta_first = 10,
        delta_second = 30
    shell:
        "mkdir -p {params.outdir}; "
        """
        {config[Rscript_binary]} workflow/scripts/run_decontx.R \
            --counts_nuclei {input.counts_nuclei} \
            --counts_empty {input.counts_empty} \
            --clusters {input.clusters} \
            --max_contamination {params.max_contamination} \
            --delta_first {params.delta_first} \
            --delta_second {params.delta_second} \
            --outdir {params.outdir}
        """

rule seurat_round2:
    input:
        counts = _results("decontx_prelim/{sample}/counts_low_contamination_raw.rds"),
        original_features = INPUT_FEATURES,
    output:
        #_results("seurat_round2/{sample}/seurat_obj.rds"),
        _results("seurat_round2/{sample}/seurat_clusters.csv"),
    params:
        outdir = lambda wildcards: _results(f"seurat_round2/{wildcards.sample}"),
        resolution = 0.8,
    shell:
        "mkdir -p {params.outdir}; "
        """
        {config[Rscript_binary]} workflow/scripts/run_seurat.R.bak \
            --counts {input.counts} \
            --resolution {params.resolution} \
            --outdir {params.outdir} \
        """


rule decontx_round2:
    input:
        counts_nuclei = _results("decontx_prelim/{sample}/counts_low_contamination_raw.rds"),
        counts_empty = _results("counts_protein_coding/{sample}/counts_empty.rds"),
        clusters = _results("seurat_round2/{sample}/seurat_clusters.csv"),
    output:
        results = _results("decontx_round2/{sample}/counts_low_contamination_decontaminated.rds"),
        contamination  = _results("decontx_round2/{sample}/contamination_estimates.tsv")
    conda:
        "Renv"
    params:
        sample = lambda wildcards: wildcards.sample,
        outdir = lambda wildcards: _results(f"decontx_round2/{wildcards.sample}"),
        max_contamination = 0.1,
        delta_first = 10,
        delta_second = 30
    shell:
        "mkdir -p {params.outdir}; "
        """
        {config[Rscript_binary]} workflow/scripts/run_decontx.R \
            --counts_nuclei {input.counts_nuclei} \
            --counts_empty {input.counts_empty} \
            --clusters {input.clusters} \
            --max_contamination {params.max_contamination} \
            --delta_first {params.delta_first} \
            --delta_second {params.delta_second} \
            --outdir {params.outdir}; 
        """
        "{config[python_binary]} workflow/scripts/modify_df.py"
            " --input {output.contamination}"
            " --output {output.contamination}"
            " --new_columns experiment_id"
            " --new_values {params.sample}; " 

rule seurat_round3:
    input:
        counts = _results("decontx_round2/{sample}/counts_low_contamination_decontaminated.rds"),
        original_features = INPUT_FEATURES,
    output:
        _results("seurat_round3/{sample}/seurat_obj.rds"),
        _results("seurat_round3/{sample}/seurat_clusters.csv"),
        directory(_results("seurat_round3/{sample}"))
    params:
        outdir = lambda wildcards: _results(f"seurat_round3/{wildcards.sample}"),
        resolution = 0.8,
    shell:
        "mkdir -p {params.outdir}; "
        """
        {config[Rscript_binary]} workflow/scripts/run_seurat.R.bak \
            --counts {input.counts} \
            --resolution {params.resolution} \
            --outdir {params.outdir} \
        """


checkpoint dump_seurat_object:
    input:
        rds = _results("seurat_round3/{sample}/seurat_obj.rds"),
        old = INPUT_FEATURES
    output:
        _results("cleaned/{sample}/outs/raw_feature_bc_matrix/barcodes.tsv.gz"),
        _results("cleaned/{sample}/outs/raw_feature_bc_matrix/features.tsv.gz"),
        _results("cleaned/{sample}/outs/raw_feature_bc_matrix/matrix.mtx.gz"),
        directory(_results("cleaned/{sample}")),
        directory(_results("cleaned/{sample}/outs/raw_feature_bc_matrix/"))
    params:
        outdir = lambda wildcards: _results(f"cleaned/{wildcards.sample}/outs/raw_feature_bc_matrix"),
        outdir_parent = lambda wildcards: _results(f"cleaned/{wildcards.sample}/outs/")
    shell:
        "rm -rfv {params.outdir}; "
        "mkdir -p {params.outdir_parent}; "
        "{config[Rscript_binary]} workflow/scripts/dump_seurat_RDS.R"
            " {input.rds} "
            " {params.outdir}; "
        "gzip {params.outdir}/*; "
        "{config[Rscript_binary]} workflow/scripts/update_ensgid.R"
            " {params.outdir}/features.tsv.gz"
            " {input.old}"
            " {params.outdir}/features.tsv.gz; "


rule check_results:
    input:
        adata = _results("seurat_round3_prepped/clustered.h5ad"),
        beta_barcodes = "data/beta_barcodes.tsv",
        delta_barcodes = "data/delta_barcodes.tsv"
    output:
        gcg = _results("beta_GCG.png"),
        ins = _results("delta_INS.png")
    shell:
        "{config[python_binary]} workflow/scripts/check_data.py"
            " --h5ad {input.adata}"
            " --barcodes {input.delta_barcodes}"
            " --gene INS"
            " --output {output.ins}; "
        "{config[python_binary]} workflow/scripts/check_data.py"
            " --h5ad {input.adata}"
            " --barcodes {input.beta_barcodes}"
            " --gene GCG"
            " --output {output.gcg}"


rule combine_and_integrate:
    input:
        directories = expand(_results("cleaned/{sample}/outs/raw_feature_bc_matrix"), sample=config["samples"]),
    output:
        manifest = _results("seurat_round3_prepped/manifest.tsv"),
        integrated = _results("seurat_round3_prepped/integrated_isolation_forest.h5ad"),
        pca_adata = _results("seurat_round3_prepped/pcs-normalized_pca.h5ad"),
        harmony_complete = _results("seurat_round3_prepped/harmony.tsv.gz")
    params:
        sample_ids = config["samples"],
        integrated_stem = _results("seurat_round3_prepped/integrated"),
        pcs_stem = _results("seurat_round3_prepped/pcs"),
        harmony_out = _results("seurat_round3_prepped/harmony"),
    shell:
        # Generate 10x manifest file (for merging input)
        "{config[python_binary]} workflow/scripts/generate_tenx_manifest.py"
            " --sample_ids {params.sample_ids}"
            " --sample_locations {input.directories}"
            " --output {output.manifest}; "
        # Merge 10x data
        "{config[python_binary]} workflow/scripts/scanpy_merge.py"
            " --tenxdata_file {output.manifest}"
            " --sample_metadata_file data/metadata.tsv"
            " --sample_metadata_columns_delete 'sample_status,study,study_id'"
            " --metadata_key experiment_id"
            " --output_file {params.integrated_stem}; "
        # Run isolation forest on the merged data
        "{config[python_binary]} workflow/scripts/run_isolation_forest.py"
            " --h5_anndata {params.integrated_stem}.h5ad"
            " --cell_qc_column cell_passes_qc "
            " --method IsolationForest"
            " --outliers_fraction 0.25"
            " --max_samples 0.1"
            " --metadata_columns log1p_total_counts,log1p_n_genes_by_counts"
            " --output_file {params.integrated_stem}_isolation_forest"
            " --anndata_compression_opts 6; "
        "{config[python_binary]} workflow/scripts/normalize_pcs.py"
            " --h5_anndata {params.integrated_stem}_isolation_forest.h5ad"
            " --overwrite_x_with_layer none"
            " --output_file {params.pcs_stem}; "
        "{config[python_binary]} workflow/scripts/estimate_pca_elbow.py"
            " --h5_anndata {params.pcs_stem}-normalized_pca.h5ad"
            " --output_file {params.pcs_stem}_elbow; "
        "{config[python_binary]} workflow/scripts/harmony_process_pcs.py"
            " --pca_file {params.pcs_stem}-pcs.tsv.gz"
            " --metadata_file {params.pcs_stem}-metadata.tsv.gz"
            " --metadata_column experiment_id"
            " --theta 1.0"
            " --n_pcs $(cat {params.pcs_stem}_elbow-auto_elbow_estimate.tsv)"
            " --out_file {params.harmony_out}; "

# Cluster based on output of Harmony
rule final_clustering:
    input:
        adata = _results("seurat_round3_prepped/pcs-normalized_pca.h5ad"),
        harmony = _results("seurat_round3_prepped/harmony.tsv.gz"),
    output:
        adata = _results("seurat_round3_prepped/clustered.h5ad")
    params:
        output_stem = _results("seurat_round3_prepped/clustered"),
        outdir  = _results("seurat_round3")
    shell:
        "{config[python_binary]} workflow/scripts/scanpy_cluster.py"
             " --h5_anndata {input.adata}"
             " --tsv_pcs {input.harmony}"
             " --number_neighbors 100"
             " --cluster_method leiden"
             " --resolution 0.5"
             " --output_file {params.output_stem}; "


rule plot_results:
    input:
        adata = _results("seurat_round3_prepped/clustered.h5ad")
    output:
        _results("plots/.done") # I'm not dealing with the weird scanpy plotting dirs
    params:
        outdir = _results("plots")
    shell:
        "mkdir -p {params.outdir}; "
        "{config[python_binary]} workflow/scripts/plot_known_markers.py"
            " --h5_anndata {input.adata}"
            " --markers_database data/data-marker_genes.tsv"
            " --output_file {params.outdir}/collins_islets; "
        "touch {output}; "


